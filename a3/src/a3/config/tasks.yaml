story_writing_task:
  description: >
    Using {description} to create a highly detailed, immersive, and emotionally engaging storyline for {game_title} in the style of {game_style}.
    
    Requirements:
    - World-building: Define the world's origin, current state, factions, and mysteries.
    - Main Plot: Design an overarching main story with clear motivation, goals, conflicts, and choices.
    - Major Events: Describe important turning points with specific dates/timelines if relevant.
    - Key Locations: Flesh out vivid descriptions of cities, dungeons, sacred sites, landscapes.
    - Characters: Introduce main characters and important NPCs with traits, backgrounds, and relationships.
    - Dialogues: Include snippets of conversations to showcase personalities and emotional shifts.
    - Battles: For key battles, describe tactics, terrain, abilities used, and emotional weight.
    - Rewards: Clearly detail major rewards (items, skills, story advancement) from each key event.
    Use FileWriterTool to output a Full storyline document (markdown file) saved at {storyline_path}.
    
  Style Guidelines:
    - Write in novel-like, narrative-rich style, focusing on immersion and emotional resonance.
    - Maintain logical consistency across locations, events, and character motivations.
    - Make sure the pacing builds tension toward climaxes and meaningful resolutions.

  expected_output: >
     Organized with headings and sections for easy reading.

  agent: "StoryTellerAgent"
  context: []

visual_prompt_design_task:
  description: >
    Based on the result of story_writing_task, analyze the narrative to identify key visual elements requiring illustration.
    Craft detailed, evocative, and style-consistent AI generation prompts for {game_title}.
    
    Requirements:
    - Input: Result of story_writing_task.
    - Characters: For each major character identified in the storyline, generate a prompt for a half-body, anime-style portrait. The prompt should specify key visual traits, attire, expression, and a simple solid color background suggestion for later removal.
    - Weapons & Magical Items: For each significant weapon or magical item described, generate a prompt for a pixel-art sprite.
    - Melee Weapons: Prompt should specify a rectangular layout, diagonal orientation (bottom-left handle to top-right tip).
    - Magic Projectiles: Prompt should specify an orb or energy effect moving towards the right. All weapon/item prompts should suggest an anime-pixel style and a simple, pure-color background for easy removal.
    - Background Scenes: For key locations and scenes described in the storyline, generate a prompt for a 2D environmental art piece (1920x1080px).
        - Prompts should specify atmosphere, key environmental features, time of day, and overall mood (anime or pixel-art inspired, matching {game_style}).
        - Prompts should explicitly state "no characters" in the scene.
    - Output Format: All prompts should be organized into a single JSON file. The JSON structure should have top-level keys, "character_prompts", "weapon_prompts", and "background_prompts". Each key will contain a list of objects, where each object has an "id" (e.g., character name, weapon name, scene_name) and a "prompt" string.
    Use FileWriterTool to save the generated prompts to {image_prompts_path}.
  Style Guidelines:
    - Prompts must be rich in descriptive keywords suitable for AI image generation.
    - Maintain consistency with the overall {game_style} and narrative tone from the storyline.
    - Ensure prompts provide clear direction for achieving desired visual outcomes.

  expected_output: >
    A JSON file containing categorized prompts for characters, weapons/items, and background scenes.

  agent: "ImageDesignerAgent"
  context: [story_writing_task]

dialogue_writing_task:
  description: >
    Based on story_writing_task, write detailed and emotionally natural javascript dialogues for {game_title}.

    Requirements:
    - Identify key scenes and major story events.
    - For each scene, create expressive dialogue between characters, matching their personalities and emotions.
    - Types of dialogues:
      - Pre-event: setup and motivation
      - Mid-event (optional): reaction during conflict
      - Post-event: resolution or new goal

    Example:
     const dialogScenes ={{
      "scene_1": [
        {{ "speaker": "Hero", "text": "Who are you to challenge me?" }},
        {{ "speaker": "Enemy", "text": "Your journey ends here!" }}
      ],
      "scene_2": [
        {{ "speaker": "Hero", "text": "This forest feels... alive." }},
        {{ "speaker": "Spirit", "text": "Tread carefully, outsider." }}
      ]
    }}

    Style:
    - Keep lines natural, emotional, and character-consistent.
    - No robotic phrasing.
    - Match speaker names with story_writing_task.

  expected_output: >
    - Save the full dialogue to: {dialog}
    - Must be clean, parsable JSON with rich, flowing conversations.

  agent: "DialogueWriterAgent"
  context: [story_writing_task]


dialogue_controller_update_task:
  description: >
    Read and extract the triggerDialogue(logic) function from {OriginDialogCtrl}.

    Based on the latest dialogue scenes generated by dialogue_writing_task (located at a4/data/dialogue_script.json):
    - Update the scene order array inside the triggerDialogue function to match the new story sequence.
    - Adjust any conditions if necessary to correctly control scene progression.
    - No need to modify any other part of dialogCtrl.

    After updating:
    - Use FileInsertOrReplaceTool to replace ONLY the triggerDialogue(logic) function in a4/javascripts/dialogCtrl.js.
    - Ensure that the rest of the code in dialogCtrl remains unchanged.

    Notes:
    - If the triggerDialogue(logic) function already exists, replace it.
    - If it does not exist, insert the new function at the end of the file.
    - Maintain correct formatting and indentation after replacement.
    Use FileWriterTool to output replaced code at {dialogCtrl}.
    
  expected_output: >
    - The updated {dialogCtrl}, where only triggerDialogue(logic) is replaced.
    - All other parts of the file must remain untouched.

  agent: "DialogueControllerAgent"
  context: [dialogue_writing_task]


character_image_generation_task:
  description: >
    Read the full story document from visual_prompt_design_task and extract all main characters' names and basic traits.
    Cross-check with characters appearing in dialogue_writing_task to ensure naming consistency.

    For each character:
    - If the character is the protagonist (main role), name their image file as "main_role.png".
    - For other characters, use their name (from dialogue_writing_task) converted to snake_case as the file name (e.g., lyra.png, karzak.png).
    - Use GenerateImageTool to create a half-body, anime-style portrait with a simple solid color background.
    - After generation, immediately use RemoveBGTool to remove the background.

    Save:
    - Only the background-removed transparent PNG images into "a4/images/portrait".
    - A Markdown document "A4/data/character.md" listing:
      - Character name
      - Corresponding relative image path.

  naming_rules: >
    - Protagonist's image: main_role.png
    - Other characters: snake_case version of their name (e.g., karzak.png).

  expected_output: >
    - Transparent background character images saved in:
      {Portrait}
    - A character.md listing each character's name and image relative path, saved at:
      {character}

  agent: "AssetGeneratorAgent"
  context: [dialogue_writing_task, visual_prompt_design_task]

weapon_image_generation_task:
  description: >
    Read the game story document visual_prompt_design_task and automatically extract the important weapons and magical items.

    For each extracted weapon/magic:
    - Classify it into one of two types:
      - "Melee Weapon" (e.g., swords, axes):
        - Generate a pixel-art sprite with a rectangular layout.
        - Weapon should be drawn diagonally from the bottom-left (handle) to the top-right (blade tip).
      - "Magic Projectile" (e.g., fireballs, light orbs, water spheres):
        - Generate a pixel-art sprite representing an orb moving toward the right side.

    - Use GenerateImageTool to create an anime-pixel style image (recommended size 128x128).
    - The background must be simple, pure-color, and clean.

    After image generation:
    - Immediately apply RemoveBGTool to remove the background.
    - Only save the transparent version of the images under {Weapons}.

    Naming rules:
    - File names must be snake_case, based on the item name (e.g., sword_of_dawn.png, fire_orb.png).

  expected_output: >
    - Transparent background pixel-art weapons/magic sprites under:
      {Weapons}
    - A complete weapon_images.md describing all generated weapons/magics and their image paths to "a4/data/weapon_images.md".

  agent: "AssetGeneratorAgent"
  context: [story_writing_task, visual_prompt_design_task]

background_generation_task:
  description: >
    Generate background images for each scene of {game_title}, based on the story and scene descriptions from visual_prompt_design_task.

    Requirements:
    - One unique background per scene, matching the visual style (2D, anime or pixel-art inspired).
    - Image size: 1920x1080 px, PNG format.
    - No characters, focus only on environmental art.
    - Save all images into: {background}
    - File names must use snake_case and match scene names (e.g., dragon_cave.png).

    Deliverables:
    - Background images saved under {background}
    - A markdown file listing scene name and filename saved in A4/data

  expected_output: >
    - All background PNG files under {background}.
    - A4/data summarizing scene names and file paths.

  agent: "BackgroundImageAgent"
  context: [visual_prompt_design_task]

image_code_modify_task:
  description: >
    Update player.js to modify skill icon image paths according to weapon_image_generation_task.
    Specifically:
    - Parse the constructor function inside {Originplayer}.
    - Find all `this.skillIcons.[name].src = "..."` assignments.
    - Replace only the image path (the right-hand string) based on mappings from weapon_image_generation_task.
    - Keep variable names (e.g., fire, water, magic, bigLight, sword) unchanged.
    - After modification, replace the entire constructor method in {Originplayer} with the updated version.

    Notes:
    - Do not modify any code outside the constructor.
    - Ensure syntax correctness after replacement.
    - Fully automate the process through available tools.
     Use FileWriterTool to output a javascript file(code only) saved at {player}.
    
  expected_output: >
    Save the updated player.js to {player}.
    - Correctly updated image paths.
    - Constructor function structure remains intact.
    - Ready for full integration with logic.js and other systems.

  agent: "PlayerDeveloperAgent"
  context: [weapon_image_generation_task]


background_refactor_task:
  agent: "BackgroundManagerAgent"
  description: >
    Update the background script at '{OriginCodeBack}' using new scene data from '{new_scene_data_file_path}'.
    The new scene data is a JSON array of objects, each like: {"sceneKey": "example_scene", "imageFileName": "example_image.png"}.
    Assume new images are in 'images/backgrounds/'.

    Key modifications:
    1. In the constructor's 'this.backgroundImages' object:
       - Add/Update entries for each new scene: 'sceneKey: this.loadImage("images/backgrounds/imageFileName.png")'.
    2. In the 'switchBackground(scene)' method:
       - Ensure 'case' statements exist for all new 'sceneKey's to set 'this.backgroundState'.
    
    Output the complete, modified JavaScript code for the background script.

  expected_output: >
    The full refactored JavaScript code for 'background.js', saved to 'a4/javascripts/background.js'.
    The code must correctly preload and switch to new backgrounds.
  
  context:
    - "{OriginCodeBack}"              # Path to the original background.js file
    - "{new_scene_data_file_path}"  # Path to the JSON file with new scene names and image filenames

