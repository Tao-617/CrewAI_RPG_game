story_writing_task:
  description: >
    Create a highly detailed, immersive, and emotionally engaging storyline for {game_title}.

    Requirements:
    - World-building: Define the world's origin, current state, factions, and mysteries.
    - Main Plot: Design an overarching main story with clear motivation, goals, conflicts, and choices.
    - Major Events: Describe important turning points with specific dates/timelines if relevant.
    - Key Locations: Flesh out vivid descriptions of cities, dungeons, sacred sites, landscapes.
    - Characters: Introduce main characters and important NPCs with traits, backgrounds, and relationships.
    - Dialogues: Include snippets of conversations to showcase personalities and emotional shifts.
    - Battles: For key battles, describe tactics, terrain, abilities used, and emotional weight.
    - Rewards: Clearly detail major rewards (items, skills, story advancement) from each key event.

  Style Guidelines:
    - Write in novel-like, narrative-rich style, focusing on immersion and emotional resonance.
    - Maintain logical consistency across locations, events, and character motivations.
    - Make sure the pacing builds tension toward climaxes and meaningful resolutions.

  expected_output: >
    - Full storyline document saved at: a4/data/storyline.md
    - Organized with headings and sections for easy reading.

  agent: "StoryTellerAgent"
  output_file: a4/data/storyline.md



dialogue_writing_task:
  description: >
    Based on story_writing_task, write detailed and emotionally natural javascript dialogues for {game_title}.

    Requirements:
    - Identify key scenes and major story events.
    - For each scene, create expressive dialogue between characters, matching their personalities and emotions.
    - Types of dialogues:
      - Pre-event: setup and motivation
      - Mid-event (optional): reaction during conflict
      - Post-event: resolution or new goal

    Example:
     const dialogScenes ={{
      "scene_1": [
        {{ "speaker": "Hero", "text": "Who are you to challenge me?" }},
        {{ "speaker": "Enemy", "text": "Your journey ends here!" }}
      ],
      "scene_2": [
        {{ "speaker": "Hero", "text": "This forest feels... alive." }},
        {{ "speaker": "Spirit", "text": "Tread carefully, outsider." }}
      ]
    }}

    Style:
    - Keep lines natural, emotional, and character-consistent.
    - No robotic phrasing.
    - Match speaker names with story_writing_task.

  expected_output: >
    - Save the full dialogue to: a4/dialogData.js
    - Must be clean, parsable JSON with rich, flowing conversations.

  agent: "DialogueWriterAgent"
  context: [story_writing_task]


dialogue_controller_update_task:
  description: >
    Read and extract the triggerDialogue(logic) function from A3/js/dialogCtrl.js.

    Based on the latest dialogue scenes generated by dialogue_writing_task (located at a4/data/dialogue_script.json):
    - Update the scene order array inside the triggerDialogue function to match the new story sequence.
    - Adjust any conditions if necessary to correctly control scene progression.
    - No need to modify any other part of dialogCtrl.js.

    After updating:
    - Use FileInsertOrReplaceTool to replace ONLY the triggerDialogue(logic) function in a4/javascripts/dialogCtrl.js.
    - Ensure that the rest of the code in dialogCtrl.js remains unchanged.

    Notes:
    - If the triggerDialogue(logic) function already exists, replace it.
    - If it does not exist, insert the new function at the end of the file.
    - Maintain correct formatting and indentation after replacement.

  expected_output: >
    - The updated a4/javascripts/dialogCtrl.js, where only triggerDialogue(logic) is replaced.
    - All other parts of the file must remain untouched.

  agent: "DialogueControllerAgent"
  context: [dialogue_writing_task]


character_image_generation_task:
  description: >
    Read the full story document from story_writing_task and extract all main characters' names and basic traits.
    Cross-check with characters appearing in dialogue_writing_task to ensure naming consistency.

    For each character:
    - If the character is the protagonist (main role), name their image file as "main_role.png".
    - For other characters, use their name (from dialogue_writing_task) converted to snake_case as the file name (e.g., lyra.png, karzak.png).
    - Use GenerateImageTool to create a half-body, anime-style portrait with a simple solid color background.
    - After generation, immediately use RemoveBGTool to remove the background.

    Save:
    - Only the background-removed transparent PNG images into "a4/images/portrait".
    - A Markdown document "a4/data/character.md" listing:
      - Character name
      - Corresponding relative image path.

  naming_rules: >
    - Protagonist's image: main_role.png
    - Other characters: snake_case version of their name (e.g., karzak.png).

  expected_output: >
    - Transparent background character images saved in:
      a4/images/portrait
    - A character.md listing each character's name and image relative path, saved at:
      a4/data/character.md

  agent: "AssetGeneratorAgent"
  context: [story_writing_task, dialogue_writing_task]

weapon_image_generation_task:
  description: >
    Read the game story document story_writing_task and automatically extract the important weapons and magical items.

    For each extracted weapon/magic:
    - Classify it into one of two types:
      - "Melee Weapon" (e.g., swords, axes):
        - Generate a pixel-art sprite with a rectangular layout.
        - Weapon should be drawn diagonally from the bottom-left (handle) to the top-right (blade tip).
      - "Magic Projectile" (e.g., fireballs, light orbs, water spheres):
        - Generate a pixel-art sprite representing an orb moving toward the right side.

    - Use GenerateImageTool to create an anime-pixel style image (recommended size 128x128).
    - The background must be simple, pure-color, and clean.

    After image generation:
    - Immediately apply RemoveBGTool to remove the background.
    - Only save the transparent version of the images under "a4/images/weapons/".

    Naming rules:
    - File names must be snake_case, based on the item name (e.g., sword_of_dawn.png, fire_orb.png).

    Output structure:
    - Save a Markdown file "a4/data/weapon_images.md".
    - In the Markdown file, list:
      - Weapon/magic name
      - Type ("Melee" or "Magic Projectile")
      - Relative image path after background removal.

  expected_output: >
    - Transparent background pixel-art weapons/magic sprites under:
      a4/images/weapons/
    - A complete weapon_images.md describing all generated weapons/magics and their image paths to "a4/data/weapon_images.md".

  agent: "AssetGeneratorAgent"
  context: [story_writing_task]


image_code_modify_task:
  description: >
    Update player.js to modify skill icon image paths according to a4/data/weapon_images.md.
    Specifically:
    - Parse the constructor function inside A3/js/player.js.
    - Find all `this.skillIcons.[name].src = "..."` assignments.
    - Replace only the image path (the right-hand string) based on mappings from a4/data/weapon_images.md.
    - Keep variable names (e.g., fire, water, magic, bigLight, sword) unchanged.
    - After modification, replace the entire constructor method in a4/js/player.js with the updated version.

    Notes:
    - Do not modify any code outside the constructor.
    - Ensure syntax correctness after replacement.
    - Fully automate the process through available tools.
  
  expected_output: >
    Save the updated player.js to a4/javascripts/player.js.
    - Correctly updated image paths.
    - Constructor function structure remains intact.
    - Ready for full integration with logic.js and other systems.

  agent: "PlayerDeveloperAgent"
  context: []


enemy_code_development_task:
  description: >
    Implement a detailed and complete enemy.js for {game_title}, based on:
    - a4/data/storyline.md
    - A3/js/enemy.js 
    - a4/data/system_dependency.md
    - a4/data/system_design.md
    - a4/data/modules/enemy_interface.md
    The code should be fully runable. And only output the code.

    Responsibilities:
    - Manage enemy movement, attack behavior, health system.
    - Implement basic AI states (patrol, chase, attack, hurt, die).
    - Animate enemies with sprite sheets.
    - Integrate sound effects (attack, hurt, death).
  expected_output: >
    Save to a4/javascripts/enemy.js.
    - Export an Enemy class.
    - Fully functional for spawn, movement, combat, and death handling.

  agent: "EnemyDeveloperAgent"
  context: []


background_generation_task:
  description: >
    Generate background images for each scene of {game_title}, based on the story and scene descriptions from "a4/data/backgrounds.txt".

    Requirements:
    - One unique background per scene, matching the visual style (2D, anime or pixel-art inspired).
    - Image size: 1920x1080 px, PNG format.
    - No characters, focus only on environmental art.
    - Save all images into: a4/images/backgrounds/
    - File names must use snake_case and match scene names (e.g., dragon_cave.png).

    Deliverables:
    - Background images saved under a4/images/backgrounds/
    - A backgrounds_list.txt under a4/data/ listing scene name and filename.

  expected_output: >
    - All background PNG files.
    - a4/data/backgrounds_list.txt summarizing scene names and file paths.

  agent: "BackgroundImageAgent"
  context: []
  output_file: a4/data/backgrounds_list.txt

background_manager_development_task:
  description: >
    Implement a detailed and complete background.js for {game_title}, based on:
    - a4/data/storyline.md
    - A3/js/background.js (if available)
    - a4/data/system_dependency.md
    - a4/data/system_design.md
    - a4/data/modules/enemy_interface.md
    The code should be fully runable. And only output the code.

    Responsibilities:
    - Manage background scene switching.
    - Preload all background images at game start.
    - Dynamically draw the current scene's background during gameplay.
    - Maintain scene-to-background mapping (from backgrounds_list.txt).

  expected_output: >
    Save to a4/javascripts/background.js.
    - Fully supports dynamic scene changes without lag.
    - Ready to be integrated by logic.js during scene transitions.

  agent: "BackgroundManagerAgent"
  context: []


